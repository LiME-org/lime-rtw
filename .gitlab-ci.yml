# This file is a template, and might need editing before it works on your project.
# You can copy and paste this template into a new `.gitlab-ci.yml` file.
# You should not add this template to an existing `.gitlab-ci.yml` file by using the `include:` keyword.
#
# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Rust.gitlab-ci.yml

# Official language image. Look for the different tagged releases at:
# https://hub.docker.com/r/library/rust/tags/
image: "rust:latest"

# Optional: Pick zero or more services to be used on all builds.
# Only needed when using a docker container to run your tests in.
# Check out: https://docs.gitlab.com/ee/ci/services/index.html
# services:
#   - mysql:latest
#   - redis:latest
#   - postgres:latest

# Optional: Install a C compiler, cmake and git into the container.
# You will often need this when you (or any of your dependencies) depends on C code.
before_script:
   - apt-get update -yqq
   - apt-get install -yqq --no-install-recommends build-essential clang-13 libelf-dev zlib1g-dev pkg-config libbpf-dev protobuf-compiler
   - ln -s /usr/bin/clang-13 /usr/bin/clang

# Use cargo to test the project
test:cargo:
  stage: build
  script:
    - rustc --version && cargo --version  # Print version info for debugging
    - rustup component add rustfmt clippy
    - cargo test --workspace --verbose
    - cargo fmt --all -- --check
    - cargo clippy -- -D warnings
    - cargo build
  artifacts:
    paths:
      - target/*/lime-rtw
    expire_in: 1 hour
